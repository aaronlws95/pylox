class Bagel {}
print Bagel(); // Bagel instance

class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // DevonshireCream

var devonshire_cream = DevonshireCream();
print devonshire_cream; // DevonshireCream instance
print devonshire_cream.serveOn(); // Scones

class Box {}

fun notMethod(argument) {
  print "called function with " + argument;
}

var box = Box();
box.function = notMethod;
box.function("argument"); // called function with argument

class Person {
  sayName() {
    print this.name;
  }
}

var jane = Person();
jane.name = "Jane";

var method = jane.sayName;
method(); // Jane

class Person {
  sayName() {
    print this.name;
  }
}

var jane = Person();
jane.name = "Jane";

var bill = Person();
bill.name = "Bill";

bill.sayName = jane.sayName;
bill.sayName(); // Jane

class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat(); // Crunch crunch crunch!

class Egotist {
  speak() {
    print this;
  }
}

var method = Egotist().speak;
method(); // Egotist instance

class Cake {
  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // The German chocolate cake is delicious!

class Thing {
  getCallback() {
    fun localFunction() {
      print this;
    }

    return localFunction;
  }
}

var callback = Thing().getCallback();
callback(); // Thing instance

class Foo {
  init() {
    print this;
  }
}

var foo = Foo(); // Foo instance
print foo.init(); // Foo instance x2 
